Angular 11
============



Features of Angular
====================
1.Dependency Injection
2.Two way data binding
    
3.MVC :
           With angular we can develop application in clean MVC way

4.Testing : Testing is the area where Angular shines really

5.Modules,Directives,Filters/Pipes,Services, Controllers (Components and Templates) etc....

Module is a container for services,directives,pipes,
components and some other modules also.


AngularJS (1.6)                                             Angular (11.0)

1. Not developed by keeping                                 1.Developed specially for
    mobile devlopment in mind.                                Mobile development

2. Basic building block is                                 2.Basic building block is
    Java Script Function                                        a TypeScript class

3.Controllers                                             3.Components and templates

4.filters   (sort,format,search)                          4.pipes

5.services                                                5.providers

6.directives                                              6.directive   
        ng-if                                                        *ngIf
        ng-repeat                                                    *ngFor ,ngModel
      

7.routing   (function based)                              7.routing   (JSON based) 

8.development is easy                                     8.complicated





To make angular development easy Angular team has provided one tool (@angular/cli) 


@angular/cli tool internally depends on Node JS


1.

Install Node JS               :  https://nodejs.org/en/download/
Install Visual Studdion Code  :  https://code.visualstudio.com/


2.node -v

3.npm -v


4.Install angular cli

A.     Local Installation
==========================
     npm i @angular/cli  <enter>

Set Path to Node Js and Angular CLI 

C:\Users\PC5037971>set path=c:\node-v7.10.0-win-x64;c:\angular-cli\node_modules\.bin;

B.     Global Installation
===========================

     npm i -g @angular/cli   <enter>


 To see the version of angular-cli tool
=======================================
  ng version





Create A New Angular Project
===========================

ng new <project_name> <enter> 


To strat the application
=========================
Go inside the project on command prompt

npm start => ng serve (from package.json)



angular cli commands
=========================

To create a component  => ng g c  <Angular4Basics>
To create a service    => ng g s  <AngularService>
To create a directive  => ng g d  <AngularDirective>
To create a pipe       => ng g p  <AngularPipe>
To create a module     => ng g m  <AngularModule>
To create a class      => ng g class <AngularClass>


Routing
===========
/basics        => AngularBasics
/pipes         => AngularPipes
/technologies  => Technologies


templateUrl: './app.component.html',//Where to display if code is greater than 3 lines

template: '<h2>{{title}}</h2>',//Where to display if code is leass than 4 lines


Component is responsible for 4 things

 1.What to display?
 2.How to display?
 3.Where to display?
 4.Where to inject?


Angular Binding types
----------------------

1. Interpolation   

       Interpolation use the {{ expression }} to render the bound value to the componentâ€™s template.

2.Property Binding

       Property binding user [] to send values from the component  to the template.

3.Event Binding

         (click)="showHide()"

4.One way data binding
         
           [ngModel]="name"

5.Two way data binding
         
           [(ngModel)]="name"
     




 

Note :TypeScript class members are public by default.


comopnent  ->@Component
module     ->@NgModule
pipe       ->@Pipe
directive  ->@Directive
service    ->@Injectable




Angular Directives  :add functionalities to HTML elements
===========================================
Attribute Directve    :Won't change the HTML DOM structure
====================== 
 [ngStyle]
 [ngClass]
 [ngModel] =>It is applicable for only input elements > FormsModule
 [ngSwitch]
 [routerLink]

Structural Directive :Will change the HTML DOM structure
====================
   *ngFor
   *ngIf
   *ngSwitchCase   => It is applicable for only container tags
   *ngSwitchDefault=> It is applicable for only container tags

Component Directive
====================

<app-root>  </app-root>
<app-technologies></app-technologies>

<ng-template></ng-template>
<router-outlet></router-outlet>


2.Custom Directives
=======================
Attribute Directive   :  ElementRef and Renderer2
====================

<h1  [bgColor]="'red'"  [fgColor]="'red'" >Hello World</h1>

Structural Directive    :TemplateRef  and VieContainerRef
=======================

<h1  *show="true">Hello World</h1>

<h1  *hide="true">Hello World</h1>



directives
pipes
services






Day2  :
======
Angular Pipes & Services


Angular Pipes are used to format ,sort search (filter) the data.

Angular Buitlin Pipes (11)
======================
String
========
uppercase
lowercase
titlecase (angular4)
slice  

array
=====
slice

array|slice:startIndex:lastIndex


number
======
number     salary|number:'9.3-4'   
currency   salary|currency:'Rs'
percent   salary|percent


date
=====
date      

dob|date:'shortDate'
dob|date:'mediumDate'
dob|date:'longDate'
dob|date:'fullDate'
dob|date:'dd-MM-yyyy'

Object
======
object|json
object|keyvalue  -angular 6

Observable
===========
async 



Angular Custom Pipes
=====================
gender|gender    


gender|gender1    =>1 =Mr.  2=>Ms.  3.    


employees|orderBy   =>sort employees on id basis in ascending order

employees|orderBy:'id'   =>sort employees on id basis in ascending order

employees|orderBy:'name'   =>sort employees on name basis in ascending order

employees|orderBy:'name':true   =>sort employees on name basis in descending order




employees|filter:'searchText'

npm i ng2-search-filter

Ng2SearchPipeModule


Angular Application to perform 
CRUD


array.sort((e1,e2)=>e1.id-e2.id);
     =>




array.sort(function(e1,e2){
return e1.id-e2.id;
})

employees=[
{id:101,name:'ram',salary:12000.44},
{id:102,name:'ramesh',salary:15000.44},
{id:102,name:'ramesh',salary:15000.44},
{id:102,name:'ramesh',salary:15000.44},
{id:102,name:'ramesh',salary:15000.44},
{id:102,name:'ramesh',salary:15000.44},
]


array[0][id] =101  =number
array[0][name] =ram
array[0][salary] =12000.44








day3
=====
Angular Services
=====================

Module Level
=============
New Syntax From Angular 5
=========================
@Injectable({
  providedIn: 'root'
})
export class UsersService {

  constructor() { }
}

Old Syntax Before Angular 5
=========================
@Injectable()
export class UsersService {
  constructor() { }
}

@NgModule({
  declarations: [ //components,dicrectives,pipes],
  imports: [ //modules],
  providers: [UsersService],//services
 bootstrap: [AppComponent] //components
})
export class AppModule { }


Component Level
==================
@Component({
 
 providers: [UsersService],//services
 )
export class UserListComponent { }














Angular provides HttpClient from HttpClientModule to invoke remote service

RouterModule
Routes


day4
====
1.NestedComponent(Parent child Communcation)

Parent -> child   => @Input()

Child ->Parent  =>  @Output()  =>EventEmitter
        
         



FormValidation
=================
1.Template Driven Forms
2.Reactive Forms/Model Driven Form 


Template Driven Forms Features
===============================
Easy to use
Suitable for simple scenarios and fails for complex scenarios
Similar to AngularJS
Two way data binding(using [(NgModel)] syntax)
Minimal component code
Automatic track of the form and its data(handled by Angular)

Unit testing is another challenge


Reactive Forms Features
===========================================
More flexible, but needs a lot of practice
Handles any complex scenarios

No data binding is done (immutable data model preferred by most developers)

More component code and less HTML markup
Reactive transformations can be made possible such as
Handling a event based on a debounce time
Handling events when the components are distinct until changed
Adding elements dynamically

Easier unit testing



FormGroup,FormBuilder,Validators => ReactiveFormsModule







4.Pagination
=================



Services
============
Module Level Services
========================


From Angular 5 onwards 
===========================
@Injectable({
  providedIn: 'root'
})
export class CommentsService { }



Prior to Angular 5  
===========================
@Injectable()
export class CommentsService { }

@NgModule({
providers:[CommentsService ]
}
)
export class AppModule { 
  constructor(){
    console.log("AppModule created...")
 }


Component Level Services
===========================

@Injectable()
export class CommentsService { }

@Component({
providers:[CommentsService ]
}
)
export class CommentsComponent { 
  constructor(){
    console.log("[CommentsService  created...")
}





5.RouteParams and QueryParams
=============================

RouteParams (supported by http get,post,put,delete,patch)
============
https://jsonplaceholder.typicode.com/albums/1
https://jsonplaceholder.typicode.com/posts/1
https://jsonplaceholder.typicode.com/todos/1
https://jsonplaceholder.typicode.com/users/1
https://jsonplaceholder.typicode.com/comments/1


QueryParams (supported by http get method)
============
https://jsonplaceholder.typicode.com/albums?userId=1
https://jsonplaceholder.typicode.com/posts?userId=1
https://jsonplaceholder.typicode.com/todos?userId=1
https://jsonplaceholder.typicode.com/photos?albumId=1
https://jsonplaceholder.typicode.com/comments?postId=1









Use ActivatedRoute class to retrieve route params and query params


constructor(private us:UsersService,private route:ActivatedRoute) { 
    console.log("#######  UsersComponent created  ########");
  }


Route Param
===========
https://jsonplaceholder.typicode.com/users/1

       {path:'users/:userId',component:UsersComponent},


        syntax:    this.userId=this.route.snapshot.params.userId;

QueryParams
============

https://jsonplaceholder.typicode.com/posts?userId=1

   syntax  :  this.userId=this.route.snapshot.queryParams.userId;



Angular Gurads
===============
The Angular routerâ€™s navigation guards allow to grant or remove access to certain parts of the navigation.


Note that client-side route guards like this are not meant to be a security feature. They won't prevent a clever user from figuring out a way to get to the protected routes. Such security should be implemented on the server. They are instead meant as a way to improve the UX for your apps.

Types of Guards
================

1.CanActivate:
	 Controls if a route can be activated.

2.CanActivateChild:
	 Controls if children of a route can be activated.

3.CanLoad: 
	Controls if a route can even be loaded. This becomes useful for feature modules
	that are lazy loaded. They wonâ€™t even load if the guard returns false.

4.CanDeactivate: 
	Controls if the user can leave a route. Note that this guard doesnâ€™t prevent the
	user from closing the browser tab or navigating to a different address. 
	It only prevents actions from within the application itself.




@ViewChild
===========

1.To Inject The Component

  @ViewChild(NumberComponent,{static:false}) 
  private n:NumberComponent; 


2.To Inject The Directive


  @ViewChild(FgColorDirective,{static:false}) 
  private f:FgColorDirective;
  

3.To Inject The ElementRef

  @ViewChild("name",{static:false}) 
  private name:ElementRef;
  
  @ViewChild("city",{static:false}) 
  private city:ElementRef;
  


Angular CRUD Application
==========================
 
In Express app
 
          npm i cors

         In app.js

           var cors=require("cors");

           app.use(cors()); 





employees=[
{id:101,name:'Pradeep Chinchole',salary:26000.55,doj:new Date()},
{id:102,name:'Sachin Tendulkar',salary:12000.44,doj:new Date()},
{id:103,name:'Rajesh Patil',salary:34567.99,doj:new Date()},
{id:104,name:'Ankita Nag',salary:34566.77,doj:new Date()},
{id:105,name:'Smita S',salary:12000.00,doj:new Date()}
];



Restful API

https://localhost:3000/employees           GET     => get all employees
https://localhost:3000/employees/1         GET     => get employee with id 1
https://localhost:3000/employees/1         DELETE  => delete employee with id 1   
https://localhost:3000/employees/1         PUT     => update employee with id 1  
https://localhost:3000/employees/1         POST    => add employee    





Angular  Express Integration
==============================
Refer below video
=====================
https://www.youtube.com/watch?v=sTbQphoYbK0










To generate production code build
=================================
ng build --prod

It will create  dist/angular-demo-app








Angular Material
==================

npm i @angular/material @angular/cdk hammerjs

ng g @angular/material:material-nav --name NavBar

ng g @angular/material:material-table --name MyTab

ng g @angular/material:material-dashboard --name MyDashboard



Angular Material provides us with four themes.
================================================

deeppurple-amber.css

indigo-pink.css

pink-bluegrey.css

purple-green.css

Choose one theme and include into style.scss
=================================================

@import '@angular/material/prebuilt-themes/deeppurple-amber.css';



Angular JWT Authentication   
=============================
https://github.com/cornflourblue/angular-7-jwt-authentication-example






What is Protractor
What is Angular and AngularJS
What is WebdriverJS

Protractor is an end-to-end test framework for Angular and AngularJS applications
Protractor is a Node.js program built on top of WebDriverJS
Protractor runs tests against your application running in a real browser, interacting with it as a user would
Protractor can also be used to test non-angular applications

What is AngularJS?

AngularJS is a JavaScript-based open-source front-end web framework mainly maintained by Google
Type - Open-source web application framework
Written in - JavaScript
Developed by - Google
Initial release - Oct 2010

Also referred to as Angular 1

What is Angular ?

Angular is a platform and framework for building client applications in HTML and TypeScript. Angular is written in TypeScript
Type - Open-source web application framework
Written in - TypeScript
Developed by - Google
Initial release - Sep 2016

Also referred to as Angular 2+ or Angular v2 and above

Why there is no ver 3 of Angular ?

The angular router was on version 3.x before Angular 3 would have been released. 
The new ver. when released would have gone with router ver 4.x

In an effort to prevent confusion they skipped Angular 3 and scheduled Angular 4 to coincide with Angular router 4
https://youtu.be/aJIMoLgqU_o?t=1098

What is Node.js ?

platform to develop server-side networking applications
is open source
is cross-platform


Download Node JS
=================
https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi



Node.js applications are written in JavaScript, and can be run within the Node.js runtime on OS X, Microsoft Windows, and Linux.

What is WebDriverJS ?

Protractor is built on top of WebDriverJS

WebDriverJs is the Official javascript implementation of selenium
WebDriverJs helps to interact with elements on the web
Protractor extends WebDriverJS functionalities to enable automation of user actions on browser applications



Why we need Protractor ?
========================
1. Selenium webdriver does not have methods/features to locate elements based on Angular specific properties/locators

Protractor is a wrapper over Selenium webdriverjs and provides support to find angular specific elements

2. Synchronization issues while automating Angular (JS) applications with Selenium webdriver

3. A lot of web applications these days are created with Angular and AngularJS

Synchronous programming
In a synchronous programming model, things happen one at a time. 
Each operation has to wait for the previous one to be completed, before it can be executed.
Asynchronous programming
An asynchronous model allows multiple things to happen at the same time. Operations can be executed WHILE the query is being processed.




How Protractor works
========================
.Test scripts send commands to the Selenium Server
2.Selenium Server interacts with Browser Drivers
3.Browser Drivers interact with application on the real browser

On execution, test commands goes to selenium server.
Server interprets these commands
After interpretation, server sends commands to browser drivers
Communication between server and browser happen through JSON Wire protocol
Commands are interpreted by browser drivers and executed on the application running on real browsers

Before performing any action on the browser, Protractor runs extra commands to ensure the application has stabilized
This will result in 3 commands being sent to browser driver
/session/:sessionId/execute_async 
/session/:sessionId/element
/session/:sessionId/element/:id/click 




How to setup Protractor on windows
=================================

Step 1 : Download and install node.js
 https://nodejs.org/en/download/
 node -v
 npm -v

Step 2 : Install Protractor
 npm install -g protractor
 protractor --version

Step 3 : Run command
 webdriver-manager update

Step 4 : Find conf.js file at C:\Users\Administrator\AppData\Roaming\npm\node_modules\protractor\example

On cmd goto the location of this file
and run command
protractor conf.js



How to setup Protractor on mac
=======================================

Step 1 : Download and install node.js
 https://nodejs.org/en/download/
 node -v
 npm -v

Step 2 : Install Protractor
 npm install -g protractor
 protractor --version

Step 3 : Run command
 webdriver-manager update

Step 4 : Find conf.js file at /usr/local/lib/node_modules/protractor/example

On cmd goto the location of this file

and run command
protractor conf.js


Creating Protractor Framework on Visual Studio Code from scratch
==============================================================


Step 1 : Download and install Visual Studio Code
 https://code.visualstudio.com/download#

Step 2 : Open VS Code

Step 3 : Install support for JavaScript and TypeScript

Step 4 : Create a new folder and open in VS Code explorer

Step 5 : Inside ProtractorDemo folder create 2 folders
 conf
 tests

note : protractor uses jasmine test framework by default
Just in case you need to install jasmine use the command
npm install --save-dev jasmine

Step 6 : Goto the folder 
  C:\Users\Administrator\AppData\Roaming\npm\node_modules\protractor\example

Copy conf.js into conf folder in VSCode
Copy example_spec.js into tests folder in VSCode

Step 7 : In conf.js update location of spec file

Step 8 : Run conf.js in protractor
 protractor conf.js



How to create first test case in protractor
=======================================

1. How to create a test file
2. How to add steps in test file
3. How to add element locators
4. How to run test
conf.js - configurations like browser, framework, etc
spec.js - tests are present in spec file


End to End Testing
=================
1.End to End Test means automationg the applications workflow for a functionality end to end

2.Angular has support for testing End to End tests

3.Angular uses Protractor for running the end to end tests

4.We can also configure the default parameters that the protractor takes.

5.Running tests using Angular CLI.
  . ng e2e

Angular Testing
=================
1.End to End tests cover an entire functional flow of the application
2.All of your End to End test scripts are located inside the folder /e2e
3.All the end to end test scripts will have the file name ending with .e2e-spec.ts
   For eg. app-e2e-spec.ts
//All unit tests will have file name ending with .spec.ts
4.Angular has built in support for e2e tests using Protractor

5.We can find config file inside folder /e2e
     -protractor.conf.js
     -this is where all the defaults are mentioned for e2e
6.We can customize theses options based on our requirements
7.To run E2E tests -we will run the command
         - ng e2e
8.Protractor is built on the top of webdriver
9.By default Protractor uses Chrome which will download the chrome driver if it's not present
10.The protractor will give the execution report of total 
         -total failed
         -passed

11.we can change the browser we want give preference
         -protractor.conf.js

12.By default port :4200
         ng e2e --port=4300
         -baseurl
13.Generate code coverage report




Ways to Skip Tests
===================
For New Applications

ng new --skipTests

    ng new <application-name>  --skipTests


For Existing Applications
=========================

angular.json
===========
skipTests:true

ng g s  services/Hello --skipTests=true

For Some tests

 By adding x infront of the tests
   
    xdescribe
    xit




Ways To Run the specific Tests
==========================

1.For Unit Tests:  By adding "f" in front of the tests
              fdescribe
                  fit
                  fit

2.For End toEnd Tests :By adding specific specs in the e2e spec definitions

         In protractor.conf.js -> mention which specs we need to run
 




Generate Code Coverage report -
=============================
Angular has support for generating code coverage test reports

Most if not all clients will ask you to submit the test code coverage report

If the code coverage is more than 85% your code is considered  to be good

We can generate code coverage for both
          For Unit Tests
          For E2E

For Unit Tests
     By adding codeCoverage in tests inside angular.json   codeCoverage:true
     By adding th CLI ng test option --codeCoverage

  





sample conf file and example for protractor

C:\Users\PRADEEP\AppData\Roaming\npm\node_modules\protractor\example



https://www.youtube.com/watch?v=p8ENoeZENhk&list=PLhW3qG5bs-L_dgIr3hiOlnNIO8NGlXQnP










